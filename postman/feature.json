{
	"info": {
		"_postman_id": "f7565011-e30d-4dd5-ac0b-e0bcfa0cf16d",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24870878"
	},
	"item": [
		{
			"name": "Добавление нового пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(201);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target.name, '\"name\" должно равняться New User').to.eql('New User');\r",
							"pm.expect(target).to.have.property('email');\r",
							"pm.expect(target.email, '\"email\" должен быть равен mail@yahoo.com').to.eql('mail@yahoo.com')\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.name).equal(source.name, 'Имя пользователя должно соответствовать имени пользователя в запросе');\r",
							"    pm.expect(target.email).equal(source.email, 'Электронная почта пользователя должна совпадать с электронной почтой в запросе');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"New User\",\r\n  \"email\": \"mail@yahoo.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление категории",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(201);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Категория должна содержать поля: id, name\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.name).equal(source.name, 'Наименование категории должно соответствовать наименованию категории в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Встречи без повода\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(201);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('views');\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
							"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
							"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
							"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
							"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
							"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
							"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
							"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
							"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Краткое описание события\",\r\n    \"category\": \"1\",\r\n    \"description\": \"Полное описание события\",\r\n    \"eventDate\": \"2033-05-26 02:57:47\",\r\n    \"location\": {\r\n        \"lat\": 65.8158,\r\n        \"lon\": 152.8275\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 100,\r\n    \"requestModeration\": true,\r\n    \"title\": \"Заголовок события\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка добавить комментарий от несуществующего пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Новый комментарий к событию\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "999"
						},
						{
							"key": "eventId",
							"value": "106"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка добавить комментарий для несуществующего события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Новый комментарий к событию\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "136"
						},
						{
							"key": "eventId",
							"value": "999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка добавить комментарий к еще не опубликованному событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Новый комментарий к событию\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "136"
						},
						{
							"key": "eventId",
							"value": "106"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\":\"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/events/:eventId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "106"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(201);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target.text, '\"text\" должен быть равен \"Новый комментарий к событию\"').to.eql('Новый комментарий к событию')\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментари в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Новый комментарий к событию\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "136"
						},
						{
							"key": "eventId",
							"value": "106"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария по его id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target.text, '\"text\" должен быть равен \"Новый комментарий к событию\"').to.eql('Новый комментарий к событию')\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/:commentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление второго пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(201);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target.name, '\"name\" должно равняться Second User').to.eql('Second User');\r",
							"pm.expect(target).to.have.property('email');\r",
							"pm.expect(target.email, '\"email\" должен быть равен mail@rambler.ru').to.eql('mail@rambler.ru')\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.name).equal(source.name, 'Имя пользователя должно соответствовать имени пользователя в запросе');\r",
							"    pm.expect(target.email).equal(source.email, 'Электронная почта пользователя должна совпадать с электронной почтой в запросе');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Second User\",\r\n  \"email\": \"mail@rambler.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление второго комментария от второго пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(201);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target.text, '\"text\" должен быть равен \"Комментарий от второго польователя\"').to.eql('Комментарий от второго польователя')\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментари в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Комментарий от второго польователя\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "137"
						},
						{
							"key": "eventId",
							"value": "106"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить список комментариев по id события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать список с двумя элементами.\", function(){\r",
							"pm.expect(body).is.an('array');\r",
							"pm.expect(body.length, 'List должен содержать 2 элемента').to.eql(2);\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target.text, '\"text\" должен быть равен \"Новый комментарий к событию\"').to.eql('Новый комментарий к событию')\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"const target2 = pm.response.json()[1];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target2).to.have.property('id');\r",
							"pm.expect(target2).to.have.property('authorName');\r",
							"pm.expect(target2).to.have.property('text');\r",
							"pm.expect(target2.text, '\"text\" должен быть равен \"Комментарий от второго польователя\"').to.eql('Комментарий от второго польователя')\r",
							"pm.expect(target2).to.have.property('created');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/event/:eventId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"event",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "106"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить список комментариев используя фильтр. Фильтр id пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать список с одним элементом.\", function(){\r",
							"pm.expect(body).is.an('array');\r",
							"pm.expect(body.length, 'List должен содержать 1 элемент').to.eql(1);\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target.text, '\"text\" должен быть равен \"Новый комментарий к событию\"').to.eql('Новый комментарий к событию')\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments?userId=136",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "userId",
							"value": "136"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить список комментариев используя фильтр. Фильтр по тексту комментариев",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать список с двумя элементами.\", function(){\r",
							"pm.expect(body).is.an('array');\r",
							"pm.expect(body.length, 'List должен содержать 2 элемента').to.eql(2);\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target.text, '\"text\" должен быть равен \"Новый комментарий к событию\"').to.eql('Новый комментарий к событию')\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"const target2 = pm.response.json()[1];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target2).to.have.property('id');\r",
							"pm.expect(target2).to.have.property('authorName');\r",
							"pm.expect(target2).to.have.property('text');\r",
							"pm.expect(target2.text, '\"text\" должен быть равен \"Комментарий от второго польователя\"').to.eql('Комментарий от второго польователя')\r",
							"pm.expect(target2).to.have.property('created');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments?text=коММентаРий",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "text",
							"value": "коММентаРий"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить список комментариев используя несколько фильтров, по тексту и по id пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать список с одним элементом.\", function(){\r",
							"pm.expect(body).is.an('array');\r",
							"pm.expect(body.length, 'List должен содержать 1 элемент').to.eql(1);\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target.text, '\"text\" должен быть равен \"Новый комментарий к событию\"').to.eql('Новый комментарий к событию')\r",
							"pm.expect(target).to.have.property('created');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments?text=коММентаРий&userId=136",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "text",
							"value": "коММентаРий"
						},
						{
							"key": "userId",
							"value": "136"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка редактирования  комментария не его автором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Обновленный комментарий к событию\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/comments/:commentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "137"
						},
						{
							"key": "eventId",
							"value": "106"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария по его id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментари в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Обновленный комментарий к событию\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/comments/:commentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "136"
						},
						{
							"key": "eventId",
							"value": "106"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария Администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"pm.response.to.be.withBody;\r",
							"pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target.text, '\"text\" должен быть равен \"Текст исправленный администратором\"').to.eql('Текст исправленный администратором')\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментари в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Текст исправленный администратором\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/comments/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка удаления комментария не его автором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/comments/:commentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "137"
						},
						{
							"key": "eventId",
							"value": "106"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария по его id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/comments/:commentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "136"
						},
						{
							"key": "eventId",
							"value": "106"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/comments/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	]
}